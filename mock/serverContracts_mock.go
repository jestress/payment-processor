// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/serverContracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts/serverContracts.go -destination=mock/serverContracts_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTcpServer is a mock of TcpServer interface.
type MockTcpServer struct {
	ctrl     *gomock.Controller
	recorder *MockTcpServerMockRecorder
}

// MockTcpServerMockRecorder is the mock recorder for MockTcpServer.
type MockTcpServerMockRecorder struct {
	mock *MockTcpServer
}

// NewMockTcpServer creates a new mock instance.
func NewMockTcpServer(ctrl *gomock.Controller) *MockTcpServer {
	mock := &MockTcpServer{ctrl: ctrl}
	mock.recorder = &MockTcpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTcpServer) EXPECT() *MockTcpServerMockRecorder {
	return m.recorder
}

// GetExitChannel mocks base method.
func (m *MockTcpServer) GetExitChannel() chan os.Signal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitChannel")
	ret0, _ := ret[0].(chan os.Signal)
	return ret0
}

// GetExitChannel indicates an expected call of GetExitChannel.
func (mr *MockTcpServerMockRecorder) GetExitChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitChannel", reflect.TypeOf((*MockTcpServer)(nil).GetExitChannel))
}

// Start mocks base method.
func (m *MockTcpServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTcpServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTcpServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockTcpServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTcpServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTcpServer)(nil).Stop))
}

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// GetRequestTerminateChannel mocks base method.
func (m *MockRequestHandler) GetRequestTerminateChannel() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestTerminateChannel")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// GetRequestTerminateChannel indicates an expected call of GetRequestTerminateChannel.
func (mr *MockRequestHandlerMockRecorder) GetRequestTerminateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestTerminateChannel", reflect.TypeOf((*MockRequestHandler)(nil).GetRequestTerminateChannel))
}

// HandleRequest mocks base method.
func (m *MockRequestHandler) HandleRequest(request string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", request)
	ret0, _ := ret[0].(string)
	return ret0
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockRequestHandlerMockRecorder) HandleRequest(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockRequestHandler)(nil).HandleRequest), request)
}
